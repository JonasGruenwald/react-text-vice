{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["TextVice","viewBox","React","componentDidUpdate","String","prevProps","this","props","componentDidMount","calculateBox","box","textEl","current","height","render","children","textStyle","svgStyle","textClassName","svgClassName","font","width","preserveAspectRatio","fullTextStyle","className","style","state","x","y","ref","Component","PropTypes","onFit","string","App","constructor","super","handleTextChange","target","setState","text","value","fontFamily","type","onChange","href","ReactDOM","document","getElementById"],"mappings":"mfAGMA,c,QACJ,cAAmB,aACjB,wBACA,MAAa,CACXC,QAAS,iBAEX,SAAcC,IAAd,YALiB,E,2GAQnBC,+BACMC,OAAOC,EAAPD,YAA+BA,OAAOE,KAAKC,MAA/C,WACED,KAAA,gB,EAIJE,6BACEF,KAAA,gB,EAGFG,wBAAe,WACPC,EAAMJ,KAAKK,OAAOC,QAAxB,UACAN,KAAA,SACE,CACEL,QAAYS,EAAL,MAAcA,EAAd,MAAuBA,EAAvB,UAAoCA,EAAIG,SAEjD,WACM,QAAJ,OACE,cAAiB,QAAjB,a,EAMRC,kBAAS,MAWHR,KAXG,MAELS,EAFK,WAGLC,EAHK,YAILC,EAJK,WAKLC,EALK,gBAMLC,EANK,eAOLC,EAPK,OAQLC,EARK,QASLR,EATK,SAULS,EAVK,sBAcDC,EAAgB,EAAH,GAAnB,GAOA,OAJA,IACEA,gBAIA,yBACEC,UADF,EAEEC,MAFF,EAGExB,QAASK,KAAKoB,MAHhB,QAIEL,MAJF,EAKER,OALF,EAMES,oBAAqBA,GAErB,0BACEK,EADF,EAEEC,EAFF,EAGEH,MAHF,EAIED,UAJF,EAKEK,IAAKvB,KAAKK,QAdhB,K,EAtDEX,CAAiBE,IAAM4B,WA6E7B9B,YAAqB,CACnBe,SAAUgB,IADS,KAEnBf,UAAWe,IAFQ,OAGnBd,SAAUc,IAHS,OAInBb,cAAea,IAJI,OAKnBZ,aAAcY,IALK,OAMnBX,KAAMW,IANa,OAOnBC,MAAOD,IAPY,KAQnBlB,OAAQkB,IARW,OASnBV,MAAOU,IATY,OAUnBT,oBAAqBS,IAAUE,QAGjCjC,eAAwB,CACtBe,SADsB,KAEtBC,UAFsB,GAGtBC,SAHsB,GAItBC,cAJsB,KAKtBC,aALsB,KAMtBC,KANsB,KAOtBY,MAPsB,KAQtBX,MARsB,OAStBR,OATsB,OAUtBS,oBAAqB,iB,QCnGvB,MAAMY,UAAYhC,IAAM4B,UAEtBK,YAAY5B,GACV6B,MAAM7B,GADW,KAOnB8B,iBAAmB,EAAEC,aACnBhC,KAAKiC,SAAS,CAACC,KAAMF,EAAOG,SAN5BnC,KAAKoB,MAAQ,CACXc,KAAM,gBAQV1B,SAAU,MACD0B,EAAQlC,KAAKoB,MAAbc,KACP,OACE,yBAAKf,MAAO,CAACiB,WAAY,eACvB,yEAEA,kBAAC,EAAD,CACEtB,KAAK,0BAEJoB,GAGH,4CACA,2BAAOG,KAAK,OAAOC,SAAUtC,KAAK+B,iBAAkBI,MAAOD,IAC3D,6BACA,uBAAGK,KAAK,qDAAR,YAMOX,QCjCfY,IAAShC,OAAO,kBAAC,EAAD,MAASiC,SAASC,eAAe,U","file":"static/js/main.e1c8d34b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass TextVice extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viewBox: '0 0 1000 1000'\n    }\n    this.textEl = React.createRef()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (String(prevProps.children) !== String(this.props.children)) {\n      this.calculateBox()\n    }\n  }\n\n  componentDidMount() {\n    this.calculateBox()\n  }\n\n  calculateBox() {\n    const box = this.textEl.current.getBBox()\n    this.setState(\n      {\n        viewBox: `${box.x} ${box.y} ${box.width} ${box.height}`\n      },\n      () => {\n        if (this.props.onFit) {\n          this.props.onFit(this.state.viewBox)\n        }\n      }\n    )\n  }\n\n  render() {\n    const {\n      children,\n      textStyle,\n      svgStyle,\n      textClassName,\n      svgClassName,\n      font,\n      width,\n      height,\n      preserveAspectRatio\n    } = this.props\n\n    // Merge all text object styles together in one object\n    const fullTextStyle = {\n      ...textStyle\n    }\n    if (font) {\n      fullTextStyle.fontFamily = font\n    }\n\n    return (\n      <svg\n        className={svgClassName}\n        style={svgStyle}\n        viewBox={this.state.viewBox}\n        width={width}\n        height={height}\n        preserveAspectRatio={preserveAspectRatio}\n      >\n        <text\n          x={0}\n          y={0}\n          style={fullTextStyle}\n          className={textClassName}\n          ref={this.textEl}\n        >\n          {children}\n        </text>\n      </svg>\n    )\n  }\n}\n\nTextVice.propTypes = {\n  children: PropTypes.node,\n  textStyle: PropTypes.Object,\n  svgStyle: PropTypes.Object,\n  textClassName: PropTypes.Object,\n  svgClassName: PropTypes.Object,\n  font: PropTypes.string,\n  onFit: PropTypes.func,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  preserveAspectRatio: PropTypes.string\n}\n\nTextVice.defaultProps = {\n  children: null,\n  textStyle: {},\n  svgStyle: {},\n  textClassName: null,\n  svgClassName: null,\n  font: null,\n  onFit: null,\n  width: 'auto',\n  height: 'auto',\n  preserveAspectRatio: 'xMidYMid meet'\n}\n\nexport default TextVice\n","import React from 'react'\n\nimport TextVice from 'react-text-vice'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello there!\"\n    }\n  }\n\n  handleTextChange = ({target}) => {\n    this.setState({text: target.value})\n  }\n\n  render() {\n    const {text} = this.state;\n    return (\n      <div style={{fontFamily: \"sans-serif\"}}>\n        <div>This text will scale too container width</div>\n\n        <TextVice\n          font=\"Times New Roman, serif\"\n        >\n          {text}\n        </TextVice>\n\n        <div>Change Text</div>\n        <input type=\"text\" onChange={this.handleTextChange} value={text}/>\n        <hr/>\n        <a href=\"https://github.com/JonasGruenwald/react-text-vice\">GitHub</a>\n      </div>\n    )\n  }\n}\n\nexport default App\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}