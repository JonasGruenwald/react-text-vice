{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["React","constructor","props","super","this","viewBox","componentDidUpdate","prevProps","String","isEqual","componentDidMount","document","calculateBox","box","textEl","current","x","y","width","height","state","render","preserveAspectRatio","fullTextStyle","textStyle","className","style","ref","TextVice","children","PropTypes","svgStyle","textClassName","svgClassName","font","onFit","string","App","Component","handleChange","target","setState","name","value","text","spacing","fontFamily","letterSpacing","type","onChange","step","min","max","href","ReactDOM","getElementById"],"mappings":"uOAIA,MAAM,UAAiBA,IAAvB,UACEC,YAAYC,GACVC,MAAA,GACAC,KAAA,MAAa,CACXC,QAAS,iBAEXD,KAAA,OAAcJ,IAAd,YAGFM,mBAAmBC,GACbC,OAAOD,EAAPC,YAA+BA,OAAOJ,KAAKF,MAA/C,UAEEE,KAAA,eACUK,kBAAQF,EAAD,UAAsBH,KAAKF,MAAvC,YAELE,KAAA,eAIJM,oBACEN,KAAA,eAGIO,SAAJ,OACEA,0BAA0B,KACxBP,KAAA,iBAKNQ,eACE,MAAMC,EAAMT,KAAKU,OAAOC,QAAxB,UACAX,KAAA,SACE,CACEC,QAAS,GAAF,OAAKQ,EAAIG,EAAT,YAAcH,EAAII,EAAlB,YAAuBJ,EAAIK,MAA3B,YAAoCL,EAAIM,SAEjD,KACMf,KAAKF,MAAT,OACEE,KAAA,YAAiBA,KAAKgB,MAAtB,WAMRC,SAAS,QAWHjB,KAVJ,MAAM,EADC,EACD,WADC,EACD,YADC,EACD,WADC,EACD,gBADC,EACD,eADC,EACD,OADC,EACD,QADC,EACD,OASJkB,EAVK,EAULA,oBAIIC,EAAgB,eACjBC,GAML,OAJA,IACED,gBAIA,yBACEE,UADF,EAEEC,MAFF,EAGErB,QAASD,KAAKgB,MAHhB,QAIEF,MAJF,EAKEC,OALF,EAMEG,oBAAqBA,GAErB,0BACEN,EADF,EAEEC,EAFF,EAGES,MAHF,EAIED,UAJF,EAKEE,IAAKvB,KAAKU,QAdhB,KAuBJc,YAAqB,CACnBC,SAAUC,IADS,KAEnBN,UAAWM,IAFQ,OAGnBC,SAAUD,IAHS,OAInBE,cAAeF,IAJI,OAKnBG,aAAcH,IALK,OAMnBI,KAAMJ,IANa,OAOnBK,MAAOL,IAPY,KAQnBX,OAAQW,IARW,OASnBZ,MAAOY,IATY,OAUnBR,oBAAqBQ,IAAUM,QAGjCR,eAAwB,CACtBC,SADsB,KAEtBL,UAFsB,GAGtBO,SAHsB,GAItBC,cAJsB,KAKtBC,aALsB,KAMtBC,KANsB,KAOtBC,MAPsB,KAQtBjB,MARsB,OAStBC,OATsB,OAUtBG,oBAAqB,iB,cC/GvB,MAAMe,UAAYrC,IAAMsC,UAEtBrC,YAAYC,GACVC,MAAMD,GADW,KAQnBqC,aAAe,EAAEC,aACfpC,KAAKqC,SAAS,CACZ,CAACD,EAAOE,MAAQF,EAAOG,SARzBvC,KAAKgB,MAAQ,CACXwB,KAAM,eACNC,QAAS,GAUbxB,SAAU,MAAD,EACiBjB,KAAKgB,MAAtBwB,EADA,EACAA,KAAMC,EADN,EACMA,QACb,OACE,yBAAKnB,MAAO,CAACoB,WAAY,eACvB,yEAEA,kBAAC,EAAD,CACEZ,KAAK,yBACLV,UAAW,CACTuB,cAAc,GAAD,OAAKF,EAAL,QAGdD,GAGH,4CACA,2BAAOI,KAAK,OAAOC,SAAU7C,KAAKmC,aAAcG,KAAK,OAAOC,MAAOC,IACnE,6BAdF,IAcQ,6BACN,sDACA,2BAAOI,KAAK,QAAQC,SAAU7C,KAAKmC,aAAcG,KAAK,UAAUC,MAAOE,EAASK,KAAK,OAAOC,IAAI,IAAIC,IAAI,OAExG,6BAlBF,IAkBQ,6BACN,oFACA,kBAAC,EAAD,CACEpB,cAAc,gBACdR,UAAW,CACTuB,cAAc,GAAD,OAAKF,EAAL,QAGdD,GAEH,6BACA,uBAAGS,KAAK,qDAAR,YAMOhB,QCrDfiB,IAASjC,OAAO,kBAAC,EAAD,MAASV,SAAS4C,eAAe,U","file":"static/js/main.a64cdff3.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\n\nclass TextVice extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viewBox: '0 0 1000 1000'\n    }\n    this.textEl = React.createRef()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (String(prevProps.children) !== String(this.props.children)) {\n      // Recalculate on text change\n      this.calculateBox()\n    } else if (!isEqual(prevProps.textStyle, this.props.textStyle)) {\n      // Recalculate on style change\n      this.calculateBox()\n    }\n  }\n\n  componentDidMount() {\n    this.calculateBox()\n\n    // If FontFace set is supported, recalculate when fonts have loaded\n    if (document.fonts) {\n      document.fonts.ready.then(() => {\n        this.calculateBox()\n      })\n    }\n  }\n\n  calculateBox() {\n    const box = this.textEl.current.getBBox()\n    this.setState(\n      {\n        viewBox: `${box.x} ${box.y} ${box.width} ${box.height}`\n      },\n      () => {\n        if (this.props.onFit) {\n          this.props.onFit(this.state.viewBox)\n        }\n      }\n    )\n  }\n\n  render() {\n    const {\n      children,\n      textStyle,\n      svgStyle,\n      textClassName,\n      svgClassName,\n      font,\n      width,\n      height,\n      preserveAspectRatio\n    } = this.props\n\n    // Merge all text object styles together in one object\n    const fullTextStyle = {\n      ...textStyle\n    }\n    if (font) {\n      fullTextStyle.fontFamily = font\n    }\n\n    return (\n      <svg\n        className={svgClassName}\n        style={svgStyle}\n        viewBox={this.state.viewBox}\n        width={width}\n        height={height}\n        preserveAspectRatio={preserveAspectRatio}\n      >\n        <text\n          x={0}\n          y={0}\n          style={fullTextStyle}\n          className={textClassName}\n          ref={this.textEl}\n        >\n          {children}\n        </text>\n      </svg>\n    )\n  }\n}\n\nTextVice.propTypes = {\n  children: PropTypes.node,\n  textStyle: PropTypes.object,\n  svgStyle: PropTypes.object,\n  textClassName: PropTypes.string,\n  svgClassName: PropTypes.string,\n  font: PropTypes.string,\n  onFit: PropTypes.func,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  preserveAspectRatio: PropTypes.string\n}\n\nTextVice.defaultProps = {\n  children: null,\n  textStyle: {},\n  svgStyle: {},\n  textClassName: null,\n  svgClassName: null,\n  font: null,\n  onFit: null,\n  width: '100%',\n  height: '100%',\n  preserveAspectRatio: 'xMidYMid meet'\n}\n\nexport default TextVice\n","import React from 'react'\nimport TextVice from 'react-text-vice'\nimport \"./style.css\"\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello there!\",\n      spacing: 0\n    }\n  }\n\n  handleChange = ({target}) => {\n    this.setState({\n      [target.name] : target.value\n    })\n  }\n\n  render() {\n    const {text, spacing} = this.state;\n    return (\n      <div style={{fontFamily: \"sans-serif\"}}>\n        <div>This text will scale too container width</div>\n\n        <TextVice\n          font=\"Times New Roman, serif\"\n          textStyle={{\n            letterSpacing: `${spacing}px`\n          }}\n        >\n          {text}\n        </TextVice>\n\n        <div>Change Text</div>\n        <input type=\"text\" onChange={this.handleChange} name=\"text\" value={text}/>\n        <br/> <br/>\n        <div>Change Letter Spacing</div>\n        <input type=\"range\" onChange={this.handleChange} name=\"spacing\" value={spacing} step=\"0.01\" min=\"1\" max=\"10\"/>\n\n        <br/> <br/>\n        <div>Using an external font that loads in asynchronously</div>\n        <TextVice\n          textClassName=\"external-font\"\n          textStyle={{\n            letterSpacing: `${spacing}px`\n          }}\n        >\n          {text}\n        </TextVice>\n        <hr/>\n        <a href=\"https://github.com/JonasGruenwald/react-text-vice\">GitHub</a>\n      </div>\n    )\n  }\n}\n\nexport default App\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}