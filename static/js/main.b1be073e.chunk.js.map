{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["TextVice","viewBox","React","componentDidUpdate","String","prevProps","this","props","isEqual","componentDidMount","document","calculateBox","box","textEl","current","height","render","children","textStyle","svgStyle","textClassName","svgClassName","font","width","preserveAspectRatio","fullTextStyle","className","style","state","x","y","ref","Component","PropTypes","onFit","cropTop","cropBot","number","App","constructor","super","handleChange","target","setState","name","value","text","spacing","fontFamily","letterSpacing","type","onChange","step","min","max","href","ReactDOM","getElementById"],"mappings":"+gBAIMA,c,QACJ,cAAmB,aACjB,wBACA,MAAa,CACXC,QAAS,iBAEX,SAAcC,IAAd,YALiB,E,2GAQnBC,+BACMC,OAAOC,EAAPD,YAA+BA,OAAOE,KAAKC,MAA/C,UAEED,KAAA,eACUE,kBAAQH,EAAD,UAAsBC,KAAKC,MAAvC,YAELD,KAAA,gB,EAIJG,6BAAoB,WAClBH,KAAA,eAGII,SAAJ,OACEA,2BAA0B,WACxB,qB,EAKNC,wBAAe,WACPC,EAAMN,KAAKO,OAAOC,QAAxB,UAGIR,KAAKC,MAAT,UACEK,KAASA,SAAaN,KAAKC,MAA3BK,QACAA,UAAcA,SAAaN,KAAKC,MAAhCK,SAEEN,KAAKC,MAAT,UACEK,UAAcA,SAAaN,KAAKC,MAAhCK,SAGFN,KAAA,SACE,CACEL,QAAYW,EAAL,MAAcA,EAAd,MAAuBA,EAAvB,UAAoCA,EAAIG,SAEjD,WACM,QAAJ,OACE,cAAiB,QAAjB,a,EAMRC,kBAAS,MAWHV,KAXG,MAELW,EAFK,WAGLC,EAHK,YAILC,EAJK,WAKLC,EALK,gBAMLC,EANK,eAOLC,EAPK,OAQLC,EARK,QASLR,EATK,SAULS,EAVK,sBAcDC,EAAgB,EAAH,GAAnB,GAOA,OAJA,IACEA,gBAIA,yBACEC,UADF,EAEEC,MAFF,EAGE1B,QAASK,KAAKsB,MAHhB,QAIEL,MAJF,EAKER,OALF,EAMES,oBAAqBA,GAErB,0BACEK,EADF,EAEEC,EAFF,EAGEH,MAHF,EAIED,UAJF,EAKEK,IAAKzB,KAAKO,QAdhB,K,EA3EEb,CAAiBE,IAAM8B,WAkG7BhC,YAAqB,CACnBiB,SAAUgB,IADS,KAEnBf,UAAWe,IAFQ,OAGnBd,SAAUc,IAHS,OAInBb,cAAea,IAJI,OAKnBZ,aAAcY,IALK,OAMnBX,KAAMW,IANa,OAOnBC,MAAOD,IAPY,KAQnBlB,OAAQkB,IARW,OASnBV,MAAOU,IATY,OAUnBT,oBAAqBS,IAVF,OAWnBE,QAASF,IAXU,OAYnBG,QAASH,IAAUI,QAGrBrC,eAAwB,CACtBiB,SADsB,KAEtBC,UAFsB,GAGtBC,SAHsB,GAItBC,cAJsB,KAKtBC,aALsB,KAMtBC,KANsB,KAOtBY,MAPsB,KAQtBX,MARsB,OAStBR,OATsB,OAUtBS,oBAVsB,gBAWtBW,QAXsB,KAYtBC,QAAS,M,cC7HX,MAAME,UAAYpC,IAAM8B,UAEtBO,YAAYhC,GACViC,MAAMjC,GADW,KAQnBkC,aAAe,EAAEC,aACfpC,KAAKqC,SAAS,CACZ,CAACD,EAAOE,MAAQF,EAAOG,SARzBvC,KAAKsB,MAAQ,CACXkB,KAAM,eACNC,QAAS,GAUb/B,SAAU,MAAD,EACiBV,KAAKsB,MAAtBkB,EADA,EACAA,KAAMC,EADN,EACMA,QACb,OACE,yBAAKpB,MAAO,CAACqB,WAAY,eACvB,yEAEA,kBAAC,EAAD,CACE1B,KAAK,yBACLJ,UAAW,CACT+B,cAAc,GAAD,OAAKF,EAAL,QAGdD,GAGH,4CACA,2BAAOI,KAAK,OAAOC,SAAU7C,KAAKmC,aAAcG,KAAK,OAAOC,MAAOC,IACnE,6BAdF,IAcQ,6BACN,sDACA,2BAAOI,KAAK,QAAQC,SAAU7C,KAAKmC,aAAcG,KAAK,UAAUC,MAAOE,EAASK,KAAK,OAAOC,IAAI,IAAIC,IAAI,OAExG,6BAlBF,IAkBQ,6BACN,oFACA,kBAAC,EAAD,CACElC,cAAc,gBACdF,UAAW,CACT+B,cAAc,GAAD,OAAKF,EAAL,QAGdD,GAEH,6BAAK,6BACL,oDACA,kBAAC,EAAD,CACEX,QAAS,IACTC,QAAS,IACTd,KAAK,0BACLJ,UAAW,CACT+B,cAAc,GAAD,OAAKF,EAAL,QAGdD,GAEH,6BACA,uBAAGS,KAAK,qDAAR,YAMOjB,QCjEfkB,IAASxC,OAAO,kBAAC,EAAD,MAASN,SAAS+C,eAAe,U","file":"static/js/main.b1be073e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\n\nclass TextVice extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viewBox: '0 0 1000 1000'\n    }\n    this.textEl = React.createRef()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (String(prevProps.children) !== String(this.props.children)) {\n      // Recalculate on text change\n      this.calculateBox()\n    } else if (!isEqual(prevProps.textStyle, this.props.textStyle)) {\n      // Recalculate on style change\n      this.calculateBox()\n    }\n  }\n\n  componentDidMount() {\n    this.calculateBox()\n\n    // If FontFace set is supported, recalculate when fonts have loaded\n    if (document.fonts) {\n      document.fonts.ready.then(() => {\n        this.calculateBox()\n      })\n    }\n  }\n\n  calculateBox() {\n    const box = this.textEl.current.getBBox()\n\n    // Crop vertically by given factor if passed\n    if (this.props.cropTop) {\n      box.y += box.height * this.props.cropTop\n      box.height -= box.height * this.props.cropTop\n    }\n    if (this.props.cropBot) {\n      box.height -= box.height * this.props.cropBot\n    }\n\n    this.setState(\n      {\n        viewBox: `${box.x} ${box.y} ${box.width} ${box.height}`\n      },\n      () => {\n        if (this.props.onFit) {\n          this.props.onFit(this.state.viewBox)\n        }\n      }\n    )\n  }\n\n  render() {\n    const {\n      children,\n      textStyle,\n      svgStyle,\n      textClassName,\n      svgClassName,\n      font,\n      width,\n      height,\n      preserveAspectRatio\n    } = this.props\n\n    // Merge all text object styles together in one object\n    const fullTextStyle = {\n      ...textStyle\n    }\n    if (font) {\n      fullTextStyle.fontFamily = font\n    }\n\n    return (\n      <svg\n        className={svgClassName}\n        style={svgStyle}\n        viewBox={this.state.viewBox}\n        width={width}\n        height={height}\n        preserveAspectRatio={preserveAspectRatio}\n      >\n        <text\n          x={0}\n          y={0}\n          style={fullTextStyle}\n          className={textClassName}\n          ref={this.textEl}\n        >\n          {children}\n        </text>\n      </svg>\n    )\n  }\n}\n\nTextVice.propTypes = {\n  children: PropTypes.node,\n  textStyle: PropTypes.object,\n  svgStyle: PropTypes.object,\n  textClassName: PropTypes.string,\n  svgClassName: PropTypes.string,\n  font: PropTypes.string,\n  onFit: PropTypes.func,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  preserveAspectRatio: PropTypes.string,\n  cropTop: PropTypes.number,\n  cropBot: PropTypes.number\n}\n\nTextVice.defaultProps = {\n  children: null,\n  textStyle: {},\n  svgStyle: {},\n  textClassName: null,\n  svgClassName: null,\n  font: null,\n  onFit: null,\n  width: '100%',\n  height: '100%',\n  preserveAspectRatio: 'xMidYMid meet',\n  cropTop: null,\n  cropBot: null\n}\n\nexport default TextVice\n","import React from 'react'\nimport TextVice from 'react-text-vice'\nimport \"./style.css\"\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello there!\",\n      spacing: 0\n    }\n  }\n\n  handleChange = ({target}) => {\n    this.setState({\n      [target.name] : target.value\n    })\n  }\n\n  render() {\n    const {text, spacing} = this.state;\n    return (\n      <div style={{fontFamily: \"sans-serif\"}}>\n        <div>This text will scale too container width</div>\n\n        <TextVice\n          font=\"Times New Roman, serif\"\n          textStyle={{\n            letterSpacing: `${spacing}px`\n          }}\n        >\n          {text}\n        </TextVice>\n\n        <div>Change Text</div>\n        <input type=\"text\" onChange={this.handleChange} name=\"text\" value={text}/>\n        <br/> <br/>\n        <div>Change Letter Spacing</div>\n        <input type=\"range\" onChange={this.handleChange} name=\"spacing\" value={spacing} step=\"0.01\" min=\"1\" max=\"10\"/>\n\n        <br/> <br/>\n        <div>Using an external font that loads in asynchronously</div>\n        <TextVice\n          textClassName=\"external-font\"\n          textStyle={{\n            letterSpacing: `${spacing}px`\n          }}\n        >\n          {text}\n        </TextVice>\n        <br/><br/>\n        <div>Cropping vertically</div>\n        <TextVice\n          cropTop={0.25}\n          cropBot={0.25}\n          font=\"Arial Black, sans-serif\"\n          textStyle={{\n            letterSpacing: `${spacing}px`\n          }}\n        >\n          {text}\n        </TextVice>\n        <hr/>\n        <a href=\"https://github.com/JonasGruenwald/react-text-vice\">GitHub</a>\n      </div>\n    )\n  }\n}\n\nexport default App\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}